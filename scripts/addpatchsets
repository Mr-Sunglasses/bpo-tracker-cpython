#!/usr/bin/python
import sys, os, urllib2, logging
basedir = os.path.dirname(os.path.dirname(__file__))
sys.path.append(basedir+"/rietveld")
os.environ["DJANGO_SETTINGS_MODULE"]="settings"
import gae2django
gae2django.install(server_software='Django')

verbose = False
if len(sys.argv)==2 and sys.argv[1]=='-v':
    verbose=True
else:
    logging.disable(logging.ERROR)

from codereview.models import (Repository, Branch, Patch, 
                               PatchSet, Issue, Content)
from django.contrib.auth.models import User
from codereview import engine, patching
from roundup_helper.models import File, RoundupIssue
from django.db import connection, transaction
from google.appengine.ext import db as gae_db

transaction.enter_transaction_management()
transaction.managed()
python = Repository.gql("WHERE name = 'Python'").get()

_branches={}
def get_branch(branchname):
    try:
        return _branches[branchname]
    except KeyError:
        branch = Branch.gql("WHERE url = '%s%s/'" % (python.url, branchname[1:])).get()
        _branches[branchname] = branch
        return branch

def try_match(filename, chunks, branch, rev):
    try:
        r = urllib2.urlopen("http://svn.python.org/view/*checkout*/python"+branch+"/"+filename+"?rev="+str(rev))
    except urllib2.HTTPError:
        return None
    base = engine.UnifyLinebreaks(r.read())
    lines = base.splitlines(True)
    #import pdb; pdb.set_trace()
    for (start, end), newrange, oldlines, newlines in chunks:
        if lines[start:end] != oldlines:
            print "No match", filename, start, end
            return None
    return base

def find_bases(data, rev):
    startrev = rev
    to_match = []
    for filename, data in engine.SplitPatch(data):
        lines = data.splitlines(True)
        chunks = patching.ParsePatchToChunks(lines)
        if not chunks:
            return None, None
        to_match.append((filename, data, chunks))

    c = connection.cursor()
    branches = set()
    while 1:
        if rev < startrev-5000:
            if verbose:
                print "Could not find base revision and branch"
                return None, None
        c.execute("select branch from svnbranch where rev=%s", (rev,))
        branch = c.fetchone()
        if not branch:
            rev -= 1
            continue
        branch = branch[0]
        if branch in branches:
            # already tried
            rev -= 1
            continue
        branches.add(branch)
        if verbose:
            print "Trying ", branch, rev

        bases = []
        for filename, data, chunks in to_match:
            res = try_match(filename, chunks, branch, rev)
            if not res:
                break
            bases.append((filename, data, chunks, res))
        else:
            if verbose:
                print "Found match", branch, rev
            return branch, bases
        rev -= 1

c = connection.cursor()
c.execute("select id from _status where _name='closed'")
closed = c.fetchone()[0]

for f in (File.objects.filter(_revision__isnull=False,
                              _patchset__isnull=True).
          order_by('id')):
    c.execute("select nodeid from issue_files where linkid=%s", (f.id,))
    nodeid = c.fetchone()
    if not nodeid:
        if verbose:
            print "File",nodeid,"is detached"
        continue
    nodeid = nodeid[0]
    roundup = RoundupIssue.objects.get(id=nodeid)
    if roundup._status == closed:
        if verbose:
            print "issue",nodeid,"is closed"
        continue
    issue = Issue.objects.filter(id=nodeid)
    if not issue:
        c.execute("select _title, _creator from _issue where id=%s", (nodeid,))
        title, creator = c.fetchone()
        issue = Issue(id=nodeid, subject=title, owner_id=creator)
        issue.put()
    else:
        issue = issue[0]
    filename = os.path.join(basedir, "db", "files", "file",
                            str(f.id/1000), "file"+str(f.id))
    if not os.path.exists(filename):
        print filename,"not found"
        continue
    data = open(filename).read()
    if verbose:
        print "Doing", f.id
    data = engine.UnifyLinebreaks(data)
    branch, bases = find_bases(data, int(f._revision))
    if not branch:
        continue

    blob = gae_db.Blob(data)
    patchset = PatchSet(issue=issue, data=blob, parent=issue,
                        owner=User.objects.get(id=f._creator),
                        created=f._creation, modified=f._creation)
    patchset.put()
    issue.patchset=patchset
    issue.put()
    f._branch = branch
    f._patchset = str(patchset.id)
    f.save()
    for filename, data, chunks, base in bases:
        patch = Patch(patchset=patchset, text=engine.ToText(data),
                      filename=filename, parent=patchset)
        patch.put()
        content = Content(text=engine.ToText(base), parent=patch)
        content.put()
        patch.content = content
        patch.put()
    transaction.commit()

transaction.leave_transaction_management()
